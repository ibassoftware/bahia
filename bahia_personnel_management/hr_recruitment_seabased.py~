# -*- coding: utf-8 -*-
import importlib
from openerp import models, fields,api
from openerp.exceptions import except_orm, Warning, RedirectWarning,ValidationError

import datetime
import os
import sys
import base64

YEAR = 365
MONTH = 30
ALT_255 = '            ' # ALR+255 is a Special Characters in ASCII

DATE_NOW = datetime.datetime.now()

class HrEmployeeExtend(models.Model):
    _name = 'hr.employee'
    _inherit = ['hr.employee']
    _description = 'Extension of Employee Information in Recruitment Process'

    #---------------- Functions/Methods
    def getCheckListId(self):

        #checklistTemplates = self.env['hr.checklist_template'].search([])
        #employeeChecklist = self.env['hr.employee_checklist']
        SQL_QUERY ="SELECT id,1 employee_id ,id checklist_template_id"\
                   " FROM hr_checklist_template;"

        self.env.cr.execute(SQL_QUERY)
        checklistTemplates = self.env.cr.fetchall()

        return checklistTemplates

    def generateFile(self,vals):

        dt_tm_filename = DATE_NOW.strftime("%m%d%Y%H%M%S")
        byte_arr = base64.b64encode('Dummy File')
        document_binary = ""
        bln_must_save = False
        if vals.has_key('legacy_doc_1'):
            str_filename = self.filename.rstrip('.pdf') + '_' + dt_tm_filename + '.pdf'
            FILENAME_DIR = "/opt/DataFiles/" + str_filename
            if not isinstance(vals['legacy_doc_1'], bool):
                document_binary = vals['legacy_doc_1']
                byte_arr = base64.b64encode(str_filename)

                vals['legacy_doc_1'] = byte_arr
                #raise Warning(len(vals['legacy_doc_1']))
                with open(FILENAME_DIR, "wb") as f:
                    f.write(base64.b64decode(document_binary))
            else:
                os.remove(FILENAME_DIR)       

        if vals.has_key('legacy_doc_2'):
            str_filename = self.filename2.rstrip('.pdf') + '_' + dt_tm_filename + '.pdf'
            FILENAME_DIR = "/opt/DataFiles/" + str_filename
            if not isinstance(vals['legacy_doc_2'], bool):
                document_binary = vals['legacy_doc_2']   
                byte_arr = base64.b64encode(str_filename)
                vals['legacy_doc_2'] = byte_arr 
                with open(FILENAME_DIR, "wb") as f:
                    f.write(base64.b64decode(document_binary))    
            else:
                os.remove(FILENAME_DIR)                                              

        if vals.has_key('legacy_doc_3'):
            str_filename = self.filename3.rstrip('.pdf') + '_' + dt_tm_filename + '.pdf'
            FILENAME_DIR = "/opt/DataFiles/" + str_filename
            if not isinstance(vals['legacy_doc_3'], bool):
                document_binary = vals['legacy_doc_3']              
                byte_arr = base64.b64encode(str_filename)
                vals['legacy_doc_3'] = byte_arr
                with open(FILENAME_DIR, "wb") as f:
                    f.write(base64.b64decode(document_binary))        
            else:
                os.remove(FILENAME_DIR)                    
    
    # Overrides

    @api.multi
    def write(self, vals):
        self.generateFile(vals)
        super(HrEmployeeExtend, self).write(vals)
        checklistTemplates = self.env['hr.checklist_template'].search([])
        employeeChecklist = self.env['hr.employee_checklist'].search([])

        for checklistTemplate in checklistTemplates:
            # CHARACTER IS ALT+255 and Special Character in ASCII
            ALT_255 = '            '
            if len(checklistTemplate.checklist_temp_param_1) > 0:
                temp_1 = int(checklistTemplate.checklist_temp_param_1[0])
            else:
                temp_1 = None

            if len(checklistTemplate.checklist_temp_param_2) > 0:
                temp_2 = int(checklistTemplate.checklist_temp_param_2[0])
            else:
                temp_2 = None

            if len(checklistTemplate.checklist_temp_param_3) > 0:
                temp_3 = int(checklistTemplate.checklist_temp_param_3[0])
            else:
                temp_3 = None

            count_Template = self.env['hr.employee_checklist'].search_count([('checklist_template_id', '=', checklistTemplate.id),
                                                                             ('employee_id', '=', self.id)])
            if count_Template == 0:
                employeeChecklist.create({
                    'employee_id': self.id,
                    'checklist_template_id': checklistTemplate.id,
                    'param_name_1': temp_1,
                    'param_name_1_value': '',
                    'param_name_1_check': False,
                    'param_name_2': temp_2,
                    'param_name_2_value': ALT_255,
                    'param_name_2_check': False,
                    'param_name_3': temp_3,
                    'param_name_3_value': '',
                    'param_name_3_check': False,
                    'param_name_1_value_visible':  checklistTemplate.checklist_temp_param_1_with_value,
                    'param_name_2_value_visible':  checklistTemplate.checklist_temp_param_2_with_value,
                    'param_name_3_value_visible':  checklistTemplate.checklist_temp_param_3_with_value})
        return True

    # End Override Functions

    @api.model
    def _getEmpId(self):

        cr = self._cr
        uid = self._uid
        context =self._context
        obj_sequence = self.pool.get('ir.sequence')
        return obj_sequence.next_by_code(cr, uid, 'hr.employee.sequence', context=context)

    @api.onchange('first_name','middle_name','last_name')
    def getFullname(self):
        if self.first_name == False:
            self.first_name=''
        if self.middle_name == False:
            self.middle_name=''
        if self.last_name == False:
            self.last_name=''
        self.name_related = self.first_name + " " + self.middle_name + " " + self.last_name
        self.name = self.first_name + " " + self.middle_name + " " + self.last_name

    @api.onchange('employee_employment')
    def computeServiceLenght(self):
        totalyears = 0
        getEmployments = self.employee_employment
        for getEmployment in getEmployments:
            #employmenthistory = self.env['hr.employmenthistory'].search([('id', '=', getEmployments.id)])
            if isinstance(getEmployment.id, models.NewId):
                if getEmployment.date_servicefrom != False and getEmployment.date_serviceto != False:
                    date_from = datetime.datetime.strptime(getEmployment.date_servicefrom ,"%Y-%m-%d")
                    date_to = datetime.datetime.strptime(getEmployment.date_serviceto ,"%Y-%m-%d")
                    no_of_days =(((abs((date_to - date_from).days) * 24) * 60) * 60)
                    self.service_length = self.service_length + no_of_days

    def getEmployeeID(self):
        prim_key = None
        empids = self.env['hr.employee'].search([('employee_number', '=', self.employee_number)])
        if len(empids) >0:
            prim_key = int(empids[0])
        else:
            prim_key = 0
        self.employee_id = prim_key
        return prim_key

    @api.one
    def getdocumentStatus(self):
        server_date = datetime.datetime.strptime(DATE_NOW.strftime("%Y-%m-%d") ,"%Y-%m-%d")
        totaldoc = self.env['hr.employee_documents'].search_count([('date_expiry', '<', server_date),('employee_doc_id','=', self.id)])

        if totaldoc > 0:
            self.documents_status = True
        else:
            self.documents_status = False

    @api.one
    def getMedicalStatus(self):
        server_date = datetime.datetime.strptime(DATE_NOW.strftime("%Y-%m-%d") ,"%Y-%m-%d")
        totaldoc = self.env['hr.employee_medical_records'].search_count([('date_to', '<', server_date),('employee_med_rec_id','=', self.id)])

        if totaldoc > 0:
            self.medical_status = True
        else:
            self.medical_status = False

    @api.one
    def legacy_doc1_getFilename(self):

        if len(self.employee_number) > 0:
            self.filename = self.employee_number + '_ConfidentialReports.pdf'
        else:
            self.filename = 'filename_ConfidentialReports.pdf'

    @api.one
    def legacy_doc2_getFilename(self):

        if len(self.employee_number) > 0:
            self.filename2 = self.employee_number + '_PersonalData.pdf'
        else:
            self.filename2 = 'filename_PersonalData.pdf'

    @api.one
    def legacy_doc3_getFilename(self):

        if len(self.employee_number) > 0:
            self.filename3 = self.employee_number + '_PersonalSummary.pdf'
        else:
            self.filename3 = 'filename_PersonalSummary.pdf'


    @api.one
    def _checklist_count(self):
        checklist_document_model = self.env['hr.employee.checklist.documents']
        self.checklist_count =  checklist_document_model.search_count([('employee_id', '=', self.id)])


    @api.one
    def _checkLatestEmployment(self):
        server_date = datetime.datetime.strptime(DATE_NOW.strftime("%Y-%m-%d") ,"%Y-%m-%d")
        model_hr_employmenthistory = self.env['hr.employmenthistory'].search([('employee_employment_id', '=', self.id),
                                                                              ('date_servicefrom', '<=', server_date),
                                                                              ('date_serviceto', '>=', server_date)])
        if len(model_hr_employmenthistory) > 0:
            model_hr_employmenthistorty_2 = model_hr_employmenthistory.sorted(key=lambda r: r.date_serviceto, reverse = True)
            self.employee_rank = model_hr_employmenthistorty_2.employment_rank.name


    # End Functions/Methods


    #-------- Attributes/Fields
    employee_number = fields.Char('Employee Number',select = True, default = _getEmpId)
    first_name = fields.Char('First name', required = True)
    last_name = fields.Char('Last name', required = True)
    middle_name = fields.Char('Middle name')
    self_alotte = fields.Boolean('Self Allottee?', default = True)
    weight = fields.Char('Weight')
    height = fields.Char('Height')
    placeof_birth = fields.Char('Place of birth')
    sss_no = fields.Char('SSS No')
    hdmf_no = fields.Char('HDMF No')
    philhealth_no = fields.Char('Philhealth No')
    tin_no = fields.Char('Tin')
    aa_reg_no = fields.Char('AA Registry No')
    service_length = fields.Integer('Service Length')
    focllength = fields.Integer('Foclength')
    incentive_length = fields.Integer('Incentive Length')
    booking_id = fields.Char('Booking ID')
    bankacctno = fields.Text('Bank account number')
    checklistID = fields.Char('Checklist ID')
    ccl_number = fields.Char('CCL Number')
    religion = fields.Many2one('hr.religion', 'Religion')
    marital =  fields.Selection([('single', 'Single'), 
                                  ('married', 'Married'), 
                                  ('widower', 'Widower'), 
                                  ('divorced', 'Divorced'), 
                                  ('seperated', 'Seperated'), 
                                  ('live_in_partner', 'Live-in-partner')], 'Marital Status')
    employee_rank = fields.Text('Rank',store = False,compute ='_checkLatestEmployment')

    pcn = fields.Char('PCN')
    legacy_doc_1 = fields.Binary('Confidential Reports', filters='*.pdf,*.docx,*.doc')
    legacy_doc_2 = fields.Binary('Personal Data', filters='*.pdf,*.docx,*.doc')
    legacy_doc_3 = fields.Binary('Personal Summary', filters='*.pdf,*.docx,*.doc')
    employee_addresses = fields.One2many('hr.employeeaddress','employee_address_id', readonly=False,copy=False)
    employee_education = fields.One2many('hr.employeducation','employee_education_id', readonly=False,copy=False)
    employee_families = fields.One2many('hr.employee_families','employee_family_relationship_id', readonly=False,copy=False)
    employee_documents = fields.One2many('hr.employee_documents','employee_doc_id', readonly=False,copy=False)
    emloyee_medical = fields.One2many('hr.employee_medical_records','employee_med_rec_id', readonly=False,copy=False)
    employee_licenses = fields.One2many('hr.employeelicenses','employee_licenses_id', readonly=False,copy=False)
    employee_employment = fields.One2many('hr.employmenthistory','employee_employment_id', readonly=False,copy=False)
    employee_checklists = fields.One2many('hr.employee_checklist','employee_id', readonly=False,copy=False)

    employee_checklists_documents = fields.One2many('hr.employee.checklist.documents','employee_id', readonly=False,copy=False)
    
    employee_id = fields.Integer('employee_id', readonly=False,copy=False,store =False, compute='getEmployeeID')
    documents_status = fields.Boolean('Document status', readonly = True,store = False,compute ='getdocumentStatus')
    medical_status = fields.Boolean('Medical documents', readonly = True,store = False,compute ='getMedicalStatus')
    filename = fields.Char('file name', readonly = True,store = False,compute ='legacy_doc1_getFilename')
    filename2 = fields.Char('file name', readonly = True,store = False,compute ='legacy_doc2_getFilename')
    filename3 = fields.Char('file name', readonly = True,store = False,compute ='legacy_doc3_getFilename')
    description = fields.Text('Description')
    checklist_count =  fields.Integer('Checklist', store = False, compute = "_checklist_count")


class HrEmployeeAddresses(models.Model):
    _name = 'hr.employeeaddress'
    employee_address_id = fields.Many2one('hr.employee','Employee Addresses')
    addresstype = fields.Many2one('hr.addresstype','Address Type')
    address_1 = fields.Char('Address 1')
    address_2 = fields.Char('Address 2')
    address_3 = fields.Char('Address 3')
    city = fields.Char('City')
    province = fields.Char('Province')
    country = fields.Many2one('res.country', 'Country')
    telephone_number = fields.Char('Landline number')
    mobile_number = fields.Char('Mobile number')
    email_number = fields.Char('E-mail')

class HrEmployeeEducation(models.Model):
    _name = 'hr.employeducation'
    employee_education_id = fields.Many2one('hr.employee')
    schooltype = fields.Many2one('hr.recruitment.degree','Degree')
    name_school = fields.Char('School/College University')
    date_from = fields.Date('Date From')
    date_to = fields.Date('Date To')
    school_address = fields.Char('Place')
    description = fields.Text('Remarks')

    @api.onchange('date_to')
    def checkDate(self):
        if self.date_to < self.date_from:
            raise ValidationError('Date to is less than the Date from.')

    @api.constrains('date_to','date_from')
    def checkConstrainDate(self):
        if self.date_to < self.date_from:
            raise ValidationError('Date to is less than the Date from.')

class HrEmployeeFamilies(models.Model):
    _name = 'hr.employee_families'

    #@api.model
    #def _getLastLevel(self):
#	model_family_relation = self.env['hr.employee_families'].search([('employee_family_relationship_id', '=', #self.employee_family_relationship_id.id)])
#	if len(model_family_relation) > 0:
#		
#
#	else:
#		self.relation_level = 1



    employee_family_relationship_id = fields.Many2one('hr.employee')
    #relation_level = fields.Integer('Level', default = _getLastLevel)
    relationship = fields.Many2one('hr.familyrelations','Relationship')
    address_1 = fields.Char('Address 1')
    address_2 = fields.Char('Address 2')
    address_3 = fields.Char('Address 3')
    is_beneficiary = fields.Boolean('Beneficiary', default = True)
    is_allottee = fields.Boolean('Allottee', default = True)
    is_living = fields.Boolean('Living', default = True)
    occupation = fields.Char('Occupation')
    bank_details = fields.Text('Bank Details')
    telephone_number = fields.Char('Landline number')
    mobile_number = fields.Char('Mobile number')
    email_number = fields.Char('E-mail')
    city = fields.Char('City')
    province = fields.Char('Province')
    country_id = fields.Many2one('res.country', 'Nationality')
    gender = fields.Selection([('male', 'Male'), ('female', 'Female')], 'Gender')
    birthday = fields.Date("Date of Birth")
    full_name = fields.Char('Name', readonly=True)
    first_name = fields.Char('First name', required = True)
    last_name = fields.Char('Last name', required = True)
    middle_name = fields.Char('Middle name', required = True)
    placeof_birth = fields.Char('Place of birth')

class HrEmployeeDocuments(models.Model):
    _name = 'hr.employee_documents'

    _order = 'date_expiry,date_expiry,document'

    employee_doc_id =  fields.Many2one('hr.employee')
    document = fields.Many2one('hr.documenttype','Document Type')
    document_number = fields.Char('Document ID')
    date_issued = fields.Date('Date Issued',default = DATE_NOW)
    date_expiry = fields.Date('Date Expiry',default = DATE_NOW)
    issuing_authority = fields.Char('Issuing Authority')
    place_ofissue = fields.Char('Place of Issue')
    expired = fields.Char('Expired?',store = False,compute ='checkDocExpiration')

    @api.one
    def checkDocExpiration(self):
        server_date = datetime.datetime.strptime(DATE_NOW.strftime("%Y-%m-%d") ,"%Y-%m-%d")
        if (self.date_expiry == False):
            self.expired = 'NOT'
        else:
            dt_date_expiry = datetime.datetime.strptime(self.date_expiry ,"%Y-%m-%d")
            if dt_date_expiry < server_date:
                self.expired = 'EXP'
            else:
                self.expired = 'NOT'

    #@api.onchange('date_expiry')
    #def checkDate(self):
    #    if self.date_expiry < self.date_issued:
    #        raise ValidationError('Date expiry is less than the Date issued.')

#    @api.constrains('date_issued','date_expiry' )
#    def checkConstrainDate(self):
#        if self.date_expiry < self.date_issued:
#            raise ValidationError('Date expiry is less than the Date issued.')

    #@api.constrains('document')
    #def checkDocumentExists(self):
    #    #raise Warning(int(self.employee_doc_id[0]))
    #    if len(self.document) > 0:
    #        totaldoc = self.env['hr.employee_documents'].search_count([('document', '=', int(self.document)),
    #                                                                   ('employee_doc_id','=', int(self.employee_doc_id[0]))])
    #        if totaldoc > 0:
    #            raise Warning('Selected documents already exists.')

    #@api.one
    #@api.onchange('document')
    #def checkDocumentsExists(self):
        #raise Warning(int(self.employee_doc_id))
    #    raise Warning(int(self.employee_doc_id))
    #    if not isinstance(self.id, models.NewId):
    #        raise Warning(int(self.employee_doc_id))
    #        totaldoc = self.env['hr.employee_documents'].search_count([('document', '=', self.document),('employee_med_rec_id','=', int(self.employee_doc_id)),
    #                                                                    ('expired', '=', 'NOT')])
    #        if totaldoc > 0:
    #            raise ValidationError('Selected documents has already exists.')

class HrEmployeeMedicalRecords(models.Model):
    _name = 'hr.employee_medical_records'
    employee_med_rec_id = fields.Many2one('hr.employee')
    medical_type = fields.Many2one('hr.medicalrecord','Medical')
    medical_clinic = fields.Many2one('hr.clinic','Clinic')
    date_from = fields.Date('Date From',required = True)
    date_to = fields.Date('Date To',required = True)
    expired = fields.Char('Expired?',store = False,compute ='checkDocExpiration')

    #@api.constrains('date_from','date_to')
    #def checkConstrainDate(self):
    #    if self.date_to < self.date_from:
    #        raise ValidationError('Date to is less than the Date from.')

    @api.one
    def checkDocExpiration(self):
        server_date = datetime.datetime.strptime(DATE_NOW.strftime("%Y-%m-%d") ,"%Y-%m-%d")
        dt_date_expiry = datetime.datetime.strptime(self.date_to ,"%Y-%m-%d")
        if self.date_to == False:
            self.expired = 'NOT'
        else:
            if dt_date_expiry < server_date:
                self.expired = 'EXP'
            else:
                self.expired = 'NOT'

    @api.onchange('date_to')
    def checkDate(self):
        if self.date_to < self.date_from:
            raise ValidationError('Date to is less than the Date from.')

    #@api.constrains('medical_type')
    #def checkMedicalType(self):
    #    #raise Warning(int(self.employee_doc_id[0]))
    #    if len(self.medical_type) > 0:
    #        if self.env['hr.employee_medical_records'].search_count([ ('employee_med_rec_id','=', int(self.employee_med_rec_id[0]))]) > 0:
    #            totaldoc = self.env['hr.employee_medical_records'].search_count([('medical_type', '=', int(self.medical_type)),
    #                                                                       ('employee_med_rec_id','=', int(self.employee_med_rec_id[0]))])
    #            if totaldoc > 0:
    #                raise ValidationError('Selected Medical documents already exists.')

class HrEmployeeLicenses(models.Model):
    _name = 'hr.employeelicenses'

    employee_licenses_id = fields.Many2one('hr.employee')
    licensetype = fields.Many2one('hr.licensetype','License Type', required=True)
    license = fields.Many2one('hr.license','License', required=True)
    doc_number = fields.Char('Document Number', required=True)
    country = fields.Many2one('res.country', 'Country', required=True)
    date_issued = fields.Date('Issue', required=True)
    date_expiry = fields.Date('Expiry', required=True)
    place_issue = fields.Char('Place Issue', required=True)
    authority_issue = fields.Char('Authority Issue')
    remarks = fields.Text('Remarks')

    @api.constrains('date_issued','date_expiry')
    def checkConstrainDate(self):
        if self.date_expiry < self.date_issued:
            raise ValidationError('Date expiry is less than the Date issued.')

    @api.onchange('date_expiry')
    def checkDate(self):
        if self.date_expiry < self.date_issued:
            raise ValidationError('Date expiry is less than the Date issued.')

    @api.one
    @api.onchange('licensetype')
    def getlicense(self):
        if len(self.licensetype) > 0:
            mdlLicense= self.env['hr.license'].search([('license_name', '=', int(self.licensetype[0]))])
            #raise Warning(mdlLicense.ids)
            self.license = mdlLicense.ids

    @api.onchange('license')
    def getlicense(self):
        if len(self.licensetype) > 0:
            mdlLicense= self.env['hr.license'].search([('license_name', '=', int(self.licensetype[0]))])
            #raise Warning(mdlLicense.ids)
            return mdlLicense.ids

class HrEmployeeEmployment(models.Model):
    YEAR = 365
    MONTH = 30
    
    _name = 'hr.employmenthistory'
    employee_employment_id = fields.Many2one('hr.employee')
    date_departure =fields.Date('Departure Date')
    date_servicefrom =fields.Date('Service from')
    date_serviceto =fields.Date('Service to')
    object_name = fields.Char('Object')
    object_code = fields.Many2one('hr.vessel','Vessel', required =True)
    object_code_category = fields.Many2one('hr.vesselcategory','Vessel Category')
    employment_dept_code = fields.Many2one('hr.ship.department','Department', required =True)
    employment_rank = fields.Many2one('hr.rank','Rank')
    employment_status = fields.Many2one('hr.employment.status','Status')
    remarks = fields.Text('Remarks')
    place_signOn = fields.Many2one('hr.port', 'Sign On')
    place_signOff = fields.Many2one('hr.port', 'Sign Off')
    service_range = fields.Char('Service range',store = False,compute ='getYearMonthDay')

    @api.onchange('object_code')
    def _changeCategory(self):
        self.object_code_category = self.object_code.vessel_category


    @api.one
    def getYearMonthDay(self):

        if self.date_servicefrom == False or self.date_serviceto == False:
            self.service_range = '0Y 0M 0D'
        else:
            date_from = datetime.datetime.strptime(self.date_servicefrom ,"%Y-%m-%d")
            date_to = datetime.datetime.strptime(self.date_serviceto ,"%Y-%m-%d")
            no_of_days = abs((date_to - date_from).days) + 1
            # Get Years of Service


            #raise Warning(no_of_days)
            no_of_years = abs(no_of_days/365)
            no_of_days =  no_of_days - (no_of_years * 365)
            no_of_months = abs(no_of_days/30)
            no_of_days = no_of_days - (no_of_months * 30)
            no_of_day = no_of_days

            self.service_range = str(no_of_years) + 'Y ' + str(no_of_months) + 'M ' +  str(no_of_day)  + 'D'

    @api.onchange('date_servicefrom')
    def checkDate(self):
        if self.date_servicefrom < self.date_departure:
            raise ValidationError('Date service from is less than the Departure date.')

    @api.onchange('date_serviceto')
    def checkDate(self):
        if self.date_serviceto < self.date_servicefrom:
            raise ValidationError('Date service to is less than the Date service from.')

    @api.constrains('date_servicefrom')
    def checkConstrainDate(self):
        if self.date_servicefrom < self.date_departure:
            raise ValidationError('Date service from is less than the Date departure.')

    @api.constrains('date_serviceto')
    def checkConstrainDate(self):
        if self.date_serviceto < self.date_servicefrom:
            raise ValidationError('Date service to is less than the Date service from.')
#OLD
class EmployeeCheckList(models.Model):
    _name = 'hr.employee_checklist'
    employee_id = fields.Many2one('hr.employee')
    checklist_template_id = fields.Many2one('hr.checklist_template')

    param_name_1 = fields.Many2one('hr.checklist', 'Parameter 1')
    param_name_2 = fields.Many2one('hr.checklist', 'Parameter 2')
    param_name_3 = fields.Many2one('hr.checklist', 'Parameter 3')

    param_name_1_value = fields.Char("Parameter 1 value")
    param_name_2_value = fields.Char("Parameter 2 value")
    param_name_3_value = fields.Char("Parameter 3 value")

    param_name_1_check = fields.Boolean("Parameter 1 Checked?")
    param_name_2_check = fields.Boolean("Parameter 2 Checked?")
    param_name_3_check = fields.Boolean("Parameter 3 Checked?")

    param_name_1_value_visible = fields.Boolean("Parameter 1 Value visible?")
    param_name_2_value_visible = fields.Boolean("Parameter 2 Value visible?")
    param_name_3_value_visible = fields.Boolean("Parameter 3 Value visible?")

    issued_at = fields.Char("Issued at")
    date_issued = fields.Date("Date issued")
    date_expiry = fields.Date("Date Expiry")

    @api.onchange('date_expiry')
    def checkDate(self):
        if self.date_expiry < self.date_issued:
            raise ValidationError('Date expiry is less than the Date issued.')

class EmployeeChecklist(models.Model):
    _name = "hr.employee.checklist.documents"
    _order =  'checklist_no, name'


    employee_id = fields.Many2one('hr.employee')

    checklist_no = fields.Integer('Checklist No.', store=True) #, compute = "readonly_values"
    name = fields.Char('Name', store=True) # , compute = "readonly_values"
    employee_number = fields.Char('Employee Number', store=True, compute = "readonly_values")
    joining_date = fields.Date('Joining Date')
    vessel_information = fields.Char('Vessel', store=True, compute = "readonly_values")
    position_information = fields.Char('Position', store=True, compute = "readonly_values")
    medical_date = fields.Char('Date of Med')
    visa_date = fields.Char('Date of Visa')
    contact_number = fields.Char('Contact Number')
    signoff_date = fields.Date('Date Signoff')
    reported_date = fields.Date('Date Reported') 

    employee_checklists_documents_list = fields.One2many('hr.employee.checklist.documents.list','employee_checklist_document', readonly=False,copy=False)
    employee_checklists_documents_list_main = fields.One2many('hr.employee.checklist.documents.list.main','employee_checklist_document', readonly=False,copy=False)

    #Other Data
    us_visa_boolean = fields.Boolean('US Visa', default= False)
    us_visa_latest_document = fields.Char('US Visa Document ID')
    us_visa_previous_document = fields.Char('US Visa Previous Document ID')
    us_visa_IssuedAt_document = fields.Char('US Visa Previous Document ID')    
    us_visa_expiring_date = fields.Date('Expiring Date')


    us_visa2_boolean = fields.Boolean('VISA II', default= False)
    us_visa2_latest_document = fields.Char('VISA II ID')
    us_visa2_previous_document = fields.Char('VISA II Previous Document ID')
    us_visa2_IssuedAt_document = fields.Char('VISA II Previous Document ID')    
    us_visa2_expiring_date = fields.Date('Expiring Date')

    peme_boolean = fields.Boolean('PEME', default= False)
    peme_latest_document = fields.Char('Peme')
    peme_schedule_date = fields.Date('Schedule')
    clinic = fields.Char('Clinic')

    def readonly_values_2(self, vals):
        values = {}
        server_date = datetime.datetime.strptime(DATE_NOW.strftime("%Y-%m-%d") ,"%Y-%m-%d")
        employee_info_model = self.env['hr.employee'].search([('id', '=', vals['employee_id'])])
        values.update({'name': employee_info_model.last_name + ", " + employee_info_model.first_name })
        values.update({'employee_number': employee_info_model.employee_number})

        employment_history_model = self.env['hr.employmenthistory'].search([('employee_employment_id', '=', employee_info_model.id), 
                                                                            ('date_serviceto', '>=', server_date)], limit = 1)

        total_checklist_document = self.env['hr.employee.checklist.documents'].search_count([('employee_id', '=', employee_info_model.id)])
        if total_checklist_document  == 0:
            values.update({'checklist_no': 1})
        else:
            values.update({'checklist_no': total_checklist_document + 1})

        values.update({'vessel_information': employment_history_model.object_code.name})
        values.update({'position_information': employment_history_model.employment_rank.name})
        return values

    def readonly_values(self):

        self.name = self.employee_id.last_name + ", " + self.employee_id.first_name
        self.employee_number = self.employee_id.employee_number
        #Get the Employment History
        server_date = datetime.datetime.strptime(DATE_NOW.strftime("%Y-%m-%d") ,"%Y-%m-%d")
        employment_history_model = self.env['hr.employmenthistory'].search([('employee_employment_id', '=', self.employee_id.id), 
                                                                            ('date_serviceto', '>=', server_date)], limit = 1)


        # Get the Checklist Number
        total_checklist_document = self.env['hr.employee.checklist.documents'].search_count([('employee_id', '=', self.employee_id.id)])
        if self.checklist_no == 0:
            if total_checklist_document == 0:
                self.checklist_no = 1
            else:
                self.checklist_no = total_checklist_document + 1

        #Get the Vessel Information
        if isinstance(self.vessel_information, bool):
            self.vessel_information = employment_history_model.object_code.name
        elif len(self.vessel_information) == 0:
            self.vessel_information = employment_history_model.object_code.name
            
        #Get the Position
        if isinstance(self.position_information, bool):
            self.position_information = employment_history_model.employment_rank.name
        elif len(self.position_information) == 0:
            self.position_information = employment_history_model.employment_rank.name

    @api.onchange('employee_id')
    def onchange_employee_id(self):
        self.readonly_values()



    @api.model
    def createChecklistDocumentList_main(self, pObjRecord):
        checklistTemplates = self.env['hr.checklist_template'].search([])
        employeeChecklist = self.env['hr.employee.checklist.documents.list.main'].search([])
        #Write Now for the Sake of Demo 
        #This must be hardcoded
        
        #FOR US VISA
        if len(pObjRecord) == 0:
            record_id = self.id
            employee_id = self.employee_id.id
        else:
            record_id = pObjRecord.id
            employee_id = pObjRecord.employee_id.id

        vals = {'employee_checklist_document': record_id}

        checklistTemplates = self.env['hr.checklist'].search([('checklist_code', '=', 'CODE_US_VISA_MAIN_CONSTANT')])
        temp_1 = checklistTemplates.id
        vals.update({
                    'param_name_1': temp_1,
                    'param_name_1_value': '',
                    'param_name_1_check': False,
                    'param_name_1_value_visible':  True,
                    'param_name_1_check_visible':  True,
                    })

        checklistTemplates = self.env['hr.checklist'].search([('checklist_code', '=', 'CODE_US_VISA_PREVIOUS_CONSTANT')])
        temp_1 = checklistTemplates.id
        vals.update({
                    'param_name_2': temp_1,
                    'param_name_2_value': '',
                    'param_name_2_check': False,
                    'param_name_2_value_visible':  True,
                    'param_name_2_check_visible':  False,
                    })


        checklistTemplates = self.env['hr.checklist'].search([('checklist_code', '=', 'CODE_US_VISA_ISSUED_AT_CONSTANT')])
        temp_1 = checklistTemplates.id
        vals.update({
                    'param_name_3': temp_1,
                    'param_name_3_value': '',
                    'param_name_3_check': False,
                    'param_name_3_value_visible':  True,
                    'param_name_3_check_visible':  False,
                    })
        rec = employeeChecklist.create(vals)
        rec.getEmployeeDocuments_Temporary(rec)
        #FOR US VISA EXPIRATION DATE
        vals = {'employee_checklist_document': record_id}
        checklistTemplates = self.env['hr.checklist'].search([('checklist_code', '=', 'CODE_US_VISA_EXPIRY_DATE_CONSTANT')])
        temp_1 = checklistTemplates.id
        vals.update({
                    'param_name_2': temp_1,
                    'param_name_2_value': '',
                    'param_name_2_check': False,
                    'param_name_2_value_visible':  True,
                    'param_name_2_check_visible':  False,
                    })
        rec = employeeChecklist.create(vals)
        rec.getEmployeeDocuments_Temporary(rec)

        #FOR VISA 2
        vals = {'employee_checklist_document': record_id}
        checklistTemplates = self.env['hr.checklist'].search([('checklist_code', '=', 'CODE_VISA_II_CONSTANT')])
        temp_1 = checklistTemplates.id
        vals.update({
                    'param_name_1': temp_1,
                    'param_name_1_value': '',
                    'param_name_1_check': False,
                    'param_name_1_value_visible':  True,
                    'param_name_1_check_visible':  True,
                    })   
        employeeChecklist.create(vals)     

        #FOR PEME
        vals = {'employee_checklist_document': record_id}

        checklistTemplates = self.env['hr.checklist'].search([('checklist_code', '=', 'CODE_PEME_CONSTANT')])
        temp_1 = checklistTemplates.id
        vals.update({
                    'param_name_1': temp_1,
                    'param_name_1_value': '',
                    'param_name_1_check': False,
                    'param_name_1_value_visible':  True,
                    'param_name_1_check_visible':  True,
                    })

        checklistTemplates = self.env['hr.checklist'].search([('checklist_code', '=', 'CODE_SCHEDULE_PEME_CONSTANT')])
        temp_1 = checklistTemplates.id
        vals.update({
                    'param_name_2': temp_1,
                    'param_name_2_value': '',
                    'param_name_2_check': False,
                    'param_name_2_value_visible':  True,
                    'param_name_2_check_visible':  False,
                    })


        checklistTemplates = self.env['hr.checklist'].search([('checklist_code', '=', 'CODE_PEME_CLINIC_CONSTANT')])
        temp_1 = checklistTemplates.id
        vals.update({
                    'param_name_3': temp_1,
                    'param_name_3_value': '',
                    'param_name_3_check': False,
                    'param_name_3_value_visible':  True,
                    'param_name_3_check_visible':  False,
                    })
        employeeChecklist.create(vals)



    @api.model
    def createChecklistDocumentList(self, pObjRecord):
        checklistTemplates = self.env['hr.checklist_template'].search([])
        employeeChecklist = self.env['hr.employee.checklist.documents.list'].search([])

        for checklistTemplate in checklistTemplates:

            if len(checklistTemplate.checklist_temp_param_1) > 0:
                temp_1 = int(checklistTemplate.checklist_temp_param_1[0])
            else:
                temp_1 = None

            if len(checklistTemplate.checklist_temp_param_2) > 0:
                temp_2 = int(checklistTemplate.checklist_temp_param_2[0])
            else:
                temp_2 = None

            if len(checklistTemplate.checklist_temp_param_3) > 0:
                temp_3 = int(checklistTemplate.checklist_temp_param_3[0])
            else:
                temp_3 = None

            if len(checklistTemplate.checklist_temp_param_4) > 0:
                temp_4 = int(checklistTemplate.checklist_temp_param_4[0])
            else:
                temp_4 = None           

            if len(pObjRecord) == 0:
                record_id = self.id
                employee_id = self.employee_id.id
            else:
                record_id = pObjRecord.id
                employee_id = pObjRecord.employee_id.id




            count_Template = self.env['hr.employee.checklist.documents.list'].search_count([('checklist_template_id', '=', checklistTemplate.id),
                                                                             ('employee_checklist_document', '=', record_id)])

            if count_Template == 0:
                #Get First all the Documents Needed OLd new and How the Field has been setup by the User in 
                #Checklist Template
                #raise Warning('1111111')
                employee_checklist_id = employeeChecklist.create({
                    'employee_checklist_document': record_id,
                    'checklist_template_id': checklistTemplate.id,
                    'param_name_1': temp_1,
                    'param_name_1_value': '',
                    'param_name_1_check': False,
                    'param_name_2': temp_2,
                    'param_name_2_value': ALT_255,
                    'param_name_2_check': False,
                    'param_name_3': temp_3,
                    'param_name_3_value': '',
                    'param_name_3_check': False,
                    'param_name_4': temp_4,
                    'param_name_4_value': '',
                    'param_name_4_check': False,
                    'param_name_1_value_visible':  checklistTemplate.checklist_temp_param_1_with_value,
                    'param_name_2_value_visible':  checklistTemplate.checklist_temp_param_2_with_value,
                    'param_name_3_value_visible':  checklistTemplate.checklist_temp_param_3_with_value,
                    'param_name_4_value_visible':  checklistTemplate.checklist_temp_param_4_with_value,
                    'param_name_1_check_visible':  checklistTemplate.checklist_temp_param_1_check_value,
                    'param_name_2_check_visible':  checklistTemplate.checklist_temp_param_2_check_value,
                    'param_name_3_check_visible':  checklistTemplate.checklist_temp_param_3_check_value,
                    'param_name_4_check_visible':  checklistTemplate.checklist_temp_param_4_check_value,

                    'has_date_issued': checklistTemplate.checklist_temp_row_with_dateissued,
                    'has_issued_at': checklistTemplate.checklist_temp_row_with_dateissued,
                    'has_date_expiry': checklistTemplate.checklist_temp_param_1_with_dateexpired,
                    'has_changed_by':checklistTemplate.checklist_temp_param_1_with_changeby,
                    'has_change_date': checklistTemplate.checklist_temp_param_1_with_changedate, 
                    })

        employeeChecklist.getDataFromDocuments(record_id, employee_id)

    # Overrides
    @api.model
    def create(self, vals):
        readony_fields = self.readonly_values_2(vals)
        for readonly_field in readony_fields:
            vals.update({readonly_field: readony_fields[readonly_field]})
        new_record = super(EmployeeChecklist, self).create(vals)
        self.createChecklistDocumentList(new_record)
        self.createChecklistDocumentList_main(new_record)
        return new_record    


    @api.multi
    def write(self, vals):

        super(EmployeeChecklist, self).write(vals)
        self.createChecklistDocumentList('')
        return True


class EmployeeChecklist_list(models.Model):
    _name = "hr.employee.checklist.documents.list"

    checklist_template_id = fields.Many2one('hr.checklist_template')
    employee_checklist_document = fields.Many2one('hr.employee.checklist.documents')       


    param_name_1 = fields.Many2one('hr.checklist', 'Parameter 1')
    param_name_2 = fields.Many2one('hr.checklist', 'Parameter 2')
    param_name_3 = fields.Many2one('hr.checklist', 'Parameter 3')
    param_name_4 = fields.Many2one('hr.checklist', 'Parameter 4')

    param_name_1_value = fields.Char("Parameter 1 value")
    param_name_2_value = fields.Char("Parameter 2 value")
    param_name_3_value = fields.Char("Parameter 3 value")
    param_name_4_value = fields.Char("Parameter 4 value")

    param_name_1_check = fields.Boolean("Parameter 1 Checked?")
    param_name_2_check = fields.Boolean("Parameter 2 Checked?")
    param_name_3_check = fields.Boolean("Parameter 3 Checked?")
    param_name_4_check = fields.Boolean("Parameter 4 Checked?")

    param_name_1_value_visible = fields.Boolean("Parameter 1 Value visible?")
    param_name_2_value_visible = fields.Boolean("Parameter 2 Value visible?")
    param_name_3_value_visible = fields.Boolean("Parameter 3 Value visible?")
    param_name_4_value_visible = fields.Boolean("Parameter 4 Value visible?")


    param_name_1_check_visible = fields.Boolean("Parameter 1 Check visible?")
    param_name_2_check_visible = fields.Boolean("Parameter 2 Check visible?")
    param_name_3_check_visible = fields.Boolean("Parameter 3 Check visible?")
    param_name_4_check_visible = fields.Boolean("Parameter 4 Check visible?")

    has_date_issued = fields.Boolean("Date Issued Enable?")
    has_issued_at = fields.Boolean("Issued At Enable?")
    has_date_expiry = fields.Boolean("Date Expiry Enable?")            
    has_changed_by = fields.Boolean("Change by Enable")            
    has_change_date = fields.Boolean("Date Change Enable?")            

    issued_at = fields.Char("Issued at")
    date_issued = fields.Date("Date issued")
    date_expiry = fields.Date("Date Expiry")
    change_by = fields.Char("Change By")
    change_date = fields.Char("Change Date")


    @api.model
    def getEmployeeMedicalRecord(self, pchecklist, pfield_name, pemployee_id):
        model_employee_medical = self.env['hr.employee_medical_records'].search([('employee_med_rec_id', '=', pemployee_id)])
        model_employee_medical_ret =  model_employee_medical.search([('medical_type', '=',pchecklist.param_name_1.link_medical_type.id)])
        if pfield_name == 'param_name_1':
            parameter_field = pchecklist.param_name_1
            str_parameter_value = 'param_name_1_value'
            str_parameter_check = 'param_name_1_check'
        elif pfield_name == 'param_name_2':
            parameter_field = pchecklist.param_name_2
            str_parameter_value = 'param_name_2_value'
            str_parameter_check = 'param_name_2_check'            
        elif pfield_name == 'param_name_3':
            parameter_field = pchecklist.param_name_3
            str_parameter_value = 'param_name_3_value'
            str_parameter_check = 'param_name_3_check'  

        write_values = {}
        if not isinstance(parameter_field, bool):
            if len(parameter_field) > 0:
                #Get Document Properties

                if parameter_field.link_selection == 'medical':
                    if parameter_field.retrieve_history_records == 'latest_doc':
                        for license  in model_employee_medical_ret.sorted(key=lambda r: r.date_expiry, reverse = True):
                            write_values.update({str_parameter_check: 1})
                            break
                    elif parameter_field.retrieve_history_records == 'oldest_doc':
                        int_counter_record = 0
                        if len(model_employee_medical_ret) > 1:
                             for license  in model_employee_medical_ret.sorted(key=lambda r: r.date_expiry, reverse = True):
                                if int_counter_record >= 1:
                                    write_values.update({str_parameter_check: 1})
                                    break         
                                int_counter_record +=1     
        return write_values  


    @api.model
    def getEmployeeLicenses(self, pchecklist, pfield_name, pemployee_id):
        model_employee_license = self.env['hr.employeelicenses'].search([('employee_licenses_id', '=', pemployee_id)])
        model_employee_license_ret =  model_employee_license.search([('license', '=',pchecklist.param_name_1.link_license_type.id)])
        if pfield_name == 'param_name_1':
            parameter_field = pchecklist.param_name_1
            str_parameter_value = 'param_name_1_value'
            str_parameter_check = 'param_name_1_check'
        elif pfield_name == 'param_name_2':
            parameter_field = pchecklist.param_name_2
            str_parameter_value = 'param_name_2_value'
            str_parameter_check = 'param_name_2_check'            
        elif pfield_name == 'param_name_3':
            parameter_field = pchecklist.param_name_3
            str_parameter_value = 'param_name_3_value'
            str_parameter_check = 'param_name_3_check'  


        write_values = {}
        if not isinstance(parameter_field, bool):
            if len(parameter_field) > 0:
                #Get Document Properties

                if parameter_field.link_selection == 'license':
                    #raise Warning(checklist.param_name_1.link_document_type.id)
                    #Check what Kind of Kind of Records will be retrieve e.g. Old or New Records
                    #model_employee_document_ret =  model_employee_document.search([('document', '=',checklist.param_name_1.link_document_type.id),
                    #                                                                ('date_issued' ,'<=', server_date),
                    #                                                                ('date_expiry' ,'>=', server_date)])
                    #model_employee_document_ret =  model_employee_license.search([('license', '=',parameter_field.link_license_type.id)])

                    if parameter_field.retrieve_history_records == 'latest_doc':
                        for license  in model_employee_license_ret.sorted(key=lambda r: r.date_expiry, reverse = True):
                            write_values.update({str_parameter_value: license.doc_number,
                                                 str_parameter_check: 1})
                            break
                    elif parameter_field.retrieve_history_records == 'oldest_doc':
                        int_counter_record = 0
                        if len(model_employee_license_ret) > 1:
                             for license  in model_employee_license_ret.sorted(key=lambda r: r.date_expiry, reverse = True):
                                if int_counter_record >= 1:
                                    write_values.update({str_parameter_value: license.doc_number,
                                                         str_parameter_check: 1})
                                    break         
                                int_counter_record +=1     
        return write_values               

    @api.model
    def getEmployeeDocuments(self, pchecklist, pfield_name, pemployee_id):
        model_employee_document = self.env['hr.employee_documents'].search([('employee_doc_id', '=', pemployee_id)])
        model_employee_document_ret =  model_employee_document.search([('document', '=',pchecklist.param_name_1.link_document_type.id)])

        if pfield_name == 'param_name_1':
            parameter_field = pchecklist.param_name_1
            str_parameter_value = 'param_name_1_value'
            str_parameter_check = 'param_name_1_check'
        elif pfield_name == 'param_name_2':
            parameter_field = pchecklist.param_name_2
            str_parameter_value = 'param_name_2_value'
            str_parameter_check = 'param_name_2_check'            
        elif pfield_name == 'param_name_3':
            parameter_field = pchecklist.param_name_3
            str_parameter_value = 'param_name_3_value'
            str_parameter_check = 'param_name_3_check'  

        write_values = {}
        if not isinstance(parameter_field, bool):
            if len(parameter_field) > 0:
                #Get Document Properties

                if parameter_field.link_selection == 'document':
                    #raise Warning(checklist.param_name_1.link_document_type.id)
                    #Check what Kind of Kind of Records will be retrieve e.g. Old or New Records
                    #model_employee_document_ret =  model_employee_document.search([('document', '=',checklist.param_name_1.link_document_type.id),
                    #                                                                ('date_issued' ,'<=', server_date),
                    #                                                                ('date_expiry' ,'>=', server_date)])
                    model_employee_document_ret =  model_employee_document.search([('document', '=',parameter_field.link_document_type.id)])

                    #raise Warning(checklist.param_name_1.link_document_type.name)
                    if parameter_field.retrieve_history_records == 'latest_doc':
                        for document  in model_employee_document_ret.sorted(key=lambda r: r.date_expiry, reverse = True):
                            write_values.update({str_parameter_value: document.document_number,
                                                 str_parameter_check: 1})
                            break
                    elif parameter_field.retrieve_history_records == 'oldest_doc':
                        int_counter_record = 0
                        if len(model_employee_document_ret) > 1:
                             for document  in model_employee_document_ret.sorted(key=lambda r: r.date_expiry, reverse = True):
                                if int_counter_record >= 1:
                                    write_values.update({str_parameter_value: document.document_number,
                                                         str_parameter_check: 1})
                                    break         
                                int_counter_record +=1     
        return write_values               

    @api.model
    def getDataFromDocuments(self, pchecklist_document_id, employee_id):
        model_checklist_document_list = self.env[self._name].search([('employee_checklist_document', '=', pchecklist_document_id)])
        
        if len(model_checklist_document_list) > 0:

            server_date = datetime.datetime.strptime(DATE_NOW.strftime("%Y-%m-%d") ,"%Y-%m-%d")

            for checklist in model_checklist_document_list:
                write_values = {}
                write_values_final = {}    
                write_values = self.getEmployeeDocuments(checklist, 'param_name_1',employee_id)
                write_values_final.update(write_values)
                write_values = self.getEmployeeDocuments(checklist, 'param_name_2',employee_id)
                write_values_final.update(write_values)                   
                write_values = self.getEmployeeDocuments(checklist, 'param_name_3',employee_id)
                write_values_final.update(write_values)

                write_values = self.getEmployeeLicenses(checklist, 'param_name_1',employee_id)
                write_values_final.update(write_values)
                write_values = self.getEmployeeLicenses(checklist, 'param_name_2',employee_id)
                write_values_final.update(write_values)
                write_values = self.getEmployeeLicenses(checklist, 'param_name_3',employee_id)
                write_values_final.update(write_values)

                write_values = self.getEmployeeMedicalRecord(checklist, 'param_name_1',employee_id)
                write_values_final.update(write_values)
                write_values = self.getEmployeeMedicalRecord(checklist, 'param_name_2',employee_id)
                write_values_final.update(write_values)
                write_values = self.getEmployeeMedicalRecord(checklist, 'param_name_3',employee_id)
                write_values_final.update(write_values)                
                checklist.write(write_values_final)              

                #if not isinstance(checklist.param_name_1, bool):
                #    if len(checklist.param_name_1) > 0:
                        #Get Document Properties
                #        if checklist.param_name_1.link_selection == 'document':
                            #raise Warning(checklist.param_name_1.link_document_type.id)
                            #Check what Kind of Kind of Records will be retrieve e.g. Old or New Records
                            #model_employee_document_ret =  model_employee_document.search([('document', '=',checklist.param_name_1.link_document_type.id),
                            #                                                                ('date_issued' ,'<=', server_date),
                            #                                                                ('date_expiry' ,'>=', server_date)])
                #            model_employee_document_ret =  model_employee_document.search([('document', '=',checklist.param_name_1.link_document_type.id)])

                            #raise Warning(checklist.param_name_1.link_document_type.name)
                #            if checklist.param_name_1.retrieve_history_records == 'latest_doc':
                #                for document  in model_employee_document_ret.sorted(key=lambda r: r.date_expiry, reverse = True):
                #                    write_values.update({'param_name_1_value': document.document_number,
                #                                         'param_name_1_check': 1})
                #                    break
                #            elif checklist.param_name_1.retrieve_history_records == 'oldest_doc':
                #                int_counter_record = 0
                #                if len(model_employee_document_ret) > 1:
                #                     for document  in model_employee_document_ret.sorted(key=lambda r: r.date_expiry, reverse = True):
                #                        if int_counter_record >= 1:
                #                            write_values.update({'param_name_1_value': document.document_number,
                #                                                 'param_name_1_check': 1})
                #                            break         
                #                        int_counter_record +=1                          

                #if not isinstance(checklist.param_name_3, bool):
                #    if len(checklist.param_name_3) > 0:
                        #Get Document Properties
                #        if checklist.param_name_3.link_selection == 'document':
                            #Check what Kind of Kind of Records will be retrieve e.g. Old or New Records
                #            model_employee_document_ret =  model_employee_document.search([('document', '=',checklist.param_name_1.link_document_type.id)])

                #            if checklist.param_name_3.retrieve_history_records == 'latest_doc':

                #                for document  in model_employee_document_ret.sorted(key=lambda r: r.date_expiry, reverse = True):
                #                    write_values.update({'param_name_3_value': document.document_number,
                #                                         'param_name_3_check': 1})
                #                    break
                #            elif checklist.param_name_1.retrieve_history_records == 'oldest_doc':
                #                int_counter_record = 0
                #                if len(model_employee_document_ret) > 1:
                #                     for document  in model_employee_document_ret.sorted(key=lambda r: r.date_expiry, reverse = True):
                #                        if int_counter_record >= 1:
                #                            write_values.update({'param_name_3_value': document.document_number,
                #                                                 'param_name_3_check': 1})
                #                            break         
                #                        int_counter_record +=1     
              




class EmployeeChecklist_list(models.Model):
    _name = "hr.employee.checklist.documents.list.main"

    checklist_template_id = fields.Many2one('hr.checklist_template')
    employee_checklist_document = fields.Many2one('hr.employee.checklist.documents')       


    param_name_1 = fields.Many2one('hr.checklist', 'Parameter 1')
    param_name_2 = fields.Many2one('hr.checklist', 'Parameter 2')
    param_name_3 = fields.Many2one('hr.checklist', 'Parameter 3')
    param_name_4 = fields.Many2one('hr.checklist', 'Parameter 4')

    param_name_1_value = fields.Char("Parameter 1 value")
    param_name_2_value = fields.Char("Parameter 2 value")
    param_name_3_value = fields.Char("Parameter 3 value")
    param_name_4_value = fields.Char("Parameter 4 value")

    param_name_1_check = fields.Boolean("Parameter 1 Checked?")
    param_name_2_check = fields.Boolean("Parameter 2 Checked?")
    param_name_3_check = fields.Boolean("Parameter 3 Checked?")
    param_name_4_check = fields.Boolean("Parameter 4 Checked?")

    param_name_1_value_visible = fields.Boolean("Parameter 1 Value visible?")
    param_name_2_value_visible = fields.Boolean("Parameter 2 Value visible?")
    param_name_3_value_visible = fields.Boolean("Parameter 3 Value visible?")
    param_name_4_value_visible = fields.Boolean("Parameter 4 Value visible?")


    param_name_1_check_visible = fields.Boolean("Parameter 1 Check visible?")
    param_name_2_check_visible = fields.Boolean("Parameter 2 Check visible?")
    param_name_3_check_visible = fields.Boolean("Parameter 3 Check visible?")
    param_name_4_check_visible = fields.Boolean("Parameter 4 Check visible?")

    has_date_issued = fields.Boolean("Date Issued Enable?")
    has_issued_at = fields.Boolean("Issued At Enable?")
    has_date_expiry = fields.Boolean("Date Expiry Enable?")            
    has_changed_by = fields.Boolean("Change by Enable")            
    has_change_date = fields.Boolean("Date Change Enable?")            

    issued_at = fields.Char("Issued at")
    date_issued = fields.Date("Date issued")
    date_expiry = fields.Date("Date Expiry")
    change_by = fields.Char("Change By")
    change_date = fields.Char("Change Date")


    @api.model
    def getEmployeeDocuments_Temporary(self,pemployee_id):
        model_employee_document = self.env['hr.employee_documents'].search([('employee_doc_id', '=', pemployee_id.employee_checklist_document.employee_id.id)])

        if len(pemployee_id) > 0:
            #Get Document Properties
            model_employee_document_ret =  model_employee_document.search([('document', '=',pemployee_id.param_name_1.link_document_type.id)])
            if pemployee_id.param_name_1.retrieve_history_records == 'latest_doc':
                for document  in model_employee_document_ret.sorted(key=lambda r: r.date_expiry, reverse = True):

                    pemployee_id.param_name_1_value = document.document_number
                    pemployee_id.param_name_1_check = 1
                    #pemployee_id.write()
                    break


            model_employee_document_ret =  model_employee_document.search([('document', '=',pemployee_id.param_name_2.link_document_type.id)])
            if pemployee_id.param_name_2.retrieve_history_records == 'oldest_doc':
                int_counter_record = 0
                if len(model_employee_document_ret) > 1:
                     for document  in model_employee_document_ret.sorted(key=lambda r: r.date_expiry, reverse = True):
                        if int_counter_record >= 1:
                            pemployee_id.param_name_2_value = document.document_number
                            pemployee_id.param_name_2_check = 1
                            #pemployee_id.write()   
                            break   
                        int_counter_record +=1     

            model_employee_document_ret =  model_employee_document.search([('document', '=',pemployee_id.param_name_3.link_document_type.id)])
            if pemployee_id.param_name_3.retrieve_history_records == 'latest_doc':
                for document  in model_employee_document_ret.sorted(key=lambda r: r.date_expiry, reverse = True):

                    pemployee_id.param_name_3_value = document.place_ofissue
                    pemployee_id.param_name_3_check = 1
                    #pemployee_id.write()
                    break

            if pemployee_id.param_name_2.checklist_code  == 'CODE_US_VISA_EXPIRY_DATE_CONSTANT':
                date_exp = ''
                model_employee_document_ret =  model_employee_document.search([('document', '=',pemployee_id.param_name_2.link_document_type.id)])
                if pemployee_id.param_name_2.retrieve_history_records == 'latest_doc':
                    for document  in model_employee_document_ret.sorted(key=lambda r: r.date_expiry, reverse = True):
                        if not isinstance(pemployee_id.date_expiry, bool):
                            date_exp = datetime.datetime.strptime(pemployee_id.date_expiry ,"%Y-%m-%d")
                            pemployee_id.param_name_2_value = date_exp.strptime('%m/%d/%y')
                            pemployee_id.param_name_2_check = 1

                        break                



                              

    @api.model
    def getEmployeeMedicalRecord(self, pchecklist, pfield_name, pemployee_id):
        model_employee_medical = self.env['hr.employee_medical_records'].search([('employee_med_rec_id', '=', pemployee_id)])
        model_employee_medical_ret =  model_employee_medical.search([('medical_type', '=',pchecklist.param_name_1.link_medical_type.id)])
        if pfield_name == 'param_name_1':
            parameter_field = pchecklist.param_name_1
            str_parameter_value = 'param_name_1_value'
            str_parameter_check = 'param_name_1_check'
        elif pfield_name == 'param_name_2':
            parameter_field = pchecklist.param_name_2
            str_parameter_value = 'param_name_2_value'
            str_parameter_check = 'param_name_2_check'            
        elif pfield_name == 'param_name_3':
            parameter_field = pchecklist.param_name_3
            str_parameter_value = 'param_name_3_value'
            str_parameter_check = 'param_name_3_check'  

        write_values = {}
        if not isinstance(parameter_field, bool):
            if len(parameter_field) > 0:
                #Get Document Properties

                if parameter_field.link_selection == 'medical':
                    if parameter_field.retrieve_history_records == 'latest_doc':
                        for license  in model_employee_medical_ret.sorted(key=lambda r: r.date_expiry, reverse = True):
                            write_values.update({str_parameter_check: 1})
                            break
                    elif parameter_field.retrieve_history_records == 'oldest_doc':
                        int_counter_record = 0
                        if len(model_employee_medical_ret) > 1:
                             for license  in model_employee_medical_ret.sorted(key=lambda r: r.date_expiry, reverse = True):
                                if int_counter_record >= 1:
                                    write_values.update({str_parameter_check: 1})
                                    break         
                                int_counter_record +=1     
        return write_values  


    @api.model
    def getEmployeeLicenses(self, pchecklist, pfield_name, pemployee_id):
        model_employee_license = self.env['hr.employeelicenses'].search([('employee_licenses_id', '=', pemployee_id)])
        model_employee_license_ret =  model_employee_license.search([('license', '=',pchecklist.param_name_1.link_license_type.id)])
        if pfield_name == 'param_name_1':
            parameter_field = pchecklist.param_name_1
            str_parameter_value = 'param_name_1_value'
            str_parameter_check = 'param_name_1_check'
        elif pfield_name == 'param_name_2':
            parameter_field = pchecklist.param_name_2
            str_parameter_value = 'param_name_2_value'
            str_parameter_check = 'param_name_2_check'            
        elif pfield_name == 'param_name_3':
            parameter_field = pchecklist.param_name_3
            str_parameter_value = 'param_name_3_value'
            str_parameter_check = 'param_name_3_check'  


        write_values = {}
        if not isinstance(parameter_field, bool):
            if len(parameter_field) > 0:
                #Get Document Properties

                if parameter_field.link_selection == 'license':
                    if parameter_field.retrieve_history_records == 'latest_doc':
                        for license  in model_employee_license_ret.sorted(key=lambda r: r.date_expiry, reverse = True):
                            write_values.update({str_parameter_value: license.doc_number,
                                                 str_parameter_check: 1})
                            break
                    elif parameter_field.retrieve_history_records == 'oldest_doc':
                        int_counter_record = 0
                        if len(model_employee_license_ret) > 1:
                             for license  in model_employee_license_ret.sorted(key=lambda r: r.date_expiry, reverse = True):
                                if int_counter_record >= 1:
                                    write_values.update({str_parameter_value: license.doc_number,
                                                         str_parameter_check: 1})
                                    break         
                                int_counter_record +=1     
        return write_values               

    @api.model
    def getEmployeeDocuments(self, pchecklist, pfield_name, pemployee_id):
        model_employee_document = self.env['hr.employee_documents'].search([('employee_doc_id', '=', pemployee_id)])
        model_employee_document_ret =  model_employee_document.search([('document', '=',pchecklist.param_name_1.link_document_type.id)])

        if pfield_name == 'param_name_1':
            parameter_field = pchecklist.param_name_1
            str_parameter_value = 'param_name_1_value'
            str_parameter_check = 'param_name_1_check'
        elif pfield_name == 'param_name_2':
            parameter_field = pchecklist.param_name_2
            str_parameter_value = 'param_name_2_value'
            str_parameter_check = 'param_name_2_check'            
        elif pfield_name == 'param_name_3':
            parameter_field = pchecklist.param_name_3
            str_parameter_value = 'param_name_3_value'
            str_parameter_check = 'param_name_3_check'  

        write_values = {}
        if not isinstance(parameter_field, bool):
            if len(parameter_field) > 0:
                #Get Document Properties

                if parameter_field.link_selection == 'document':
                    model_employee_document_ret =  model_employee_document.search([('document', '=',parameter_field.link_document_type.id)])

                    #raise Warning(checklist.param_name_1.link_document_type.name)
                    if parameter_field.retrieve_history_records == 'latest_doc':
                        for document  in model_employee_document_ret.sorted(key=lambda r: r.date_expiry, reverse = True):
                            write_values.update({str_parameter_value: document.document_number,
                                                 str_parameter_check: 1})
                            break
                    elif parameter_field.retrieve_history_records == 'oldest_doc':
                        int_counter_record = 0
                        if len(model_employee_document_ret) > 1:
                             for document  in model_employee_document_ret.sorted(key=lambda r: r.date_expiry, reverse = True):
                                if int_counter_record >= 1:
                                    write_values.update({str_parameter_value: document.document_number,
                                                         str_parameter_check: 1})
                                    break         
                                int_counter_record +=1     
        return write_values               

    @api.model
    def getDataFromDocuments(self, pchecklist_document_id, employee_id):
        model_checklist_document_list = self.env[self._name].search([('employee_checklist_document', '=', pchecklist_document_id)])
        
        if len(model_checklist_document_list) > 0:

            server_date = datetime.datetime.strptime(DATE_NOW.strftime("%Y-%m-%d") ,"%Y-%m-%d")

            for checklist in model_checklist_document_list:
                write_values = {}
                write_values_final = {}    
                write_values = self.getEmployeeDocuments(checklist, 'param_name_1',employee_id)
                write_values_final.update(write_values)
                write_values = self.getEmployeeDocuments(checklist, 'param_name_2',employee_id)
                write_values_final.update(write_values)                   
                write_values = self.getEmployeeDocuments(checklist, 'param_name_3',employee_id)
                write_values_final.update(write_values)

                write_values = self.getEmployeeLicenses(checklist, 'param_name_1',employee_id)
                write_values_final.update(write_values)
                write_values = self.getEmployeeLicenses(checklist, 'param_name_2',employee_id)
                write_values_final.update(write_values)
                write_values = self.getEmployeeLicenses(checklist, 'param_name_3',employee_id)
                write_values_final.update(write_values)

                write_values = self.getEmployeeMedicalRecord(checklist, 'param_name_1',employee_id)
                write_values_final.update(write_values)
                write_values = self.getEmployeeMedicalRecord(checklist, 'param_name_2',employee_id)
                write_values_final.update(write_values)
                write_values = self.getEmployeeMedicalRecord(checklist, 'param_name_3',employee_id)
                write_values_final.update(write_values)                
                checklist.write(write_values_final) 
